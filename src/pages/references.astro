---
import PageLayout from "@/layouts/Base.astro";

const meta = {
  title: "Références",
  description:
    "Liste des projets réalisés en équipe au sein de l'agence Colorz entre 2010 et 2024.",
  robots: "noindex",
};

const year = new Date().getFullYear();

const agences = [
  { name: "Memoritz", tech: "Shopify / Mirakl", year: "2025" },
  { name: "Vtwonen", tech: "Shopify / Mirakl", year: "2024" },
  { name: "Mathon", tech: "Shopify / Mirakl", year: "2024" },
  { name: "Fleux", tech: "Shopify / Cegid", year: "2023" },
  { name: "Sabon", tech: "Shopify", year: "2022" },
  { name: "Le Club Leader Price", tech: "Shopify", year: "2022" },
  { name: "Chaumet", tech: "Magento 2", year: "2021" },
  { name: "Redline", tech: "Magento 2", year: "2019" },
  { name: "Natalys", tech: "Magento / Mirakl", year: "2017" },
  { name: "Merci Paris", tech: "Magento", year: "2016" },
  { name: "Make My Lemonade", tech: "Magento", year: "2016" },
  { name: "Patricia Blanchet", tech: "Magento", year: "2016" },
  { name: "Rudy's", tech: "Magento", year: "2015" },
  { name: "The Beautyst", tech: "Magento / Mirakl", year: "2015" },
  { name: "Hartford", tech: "Magento", year: "2014" },
  { name: "Colette", tech: "Magento", year: "2012" },
  { name: "Gemmyo", tech: "Magento", year: "2012" },
  { name: "émoi-émoi", tech: "Magento", year: "2011" },
  { name: "émoi-émoi", tech: "Shopify", year: "2020" },
  { name: "Jimmy Fairly", tech: "Magento", year: "2011" },
  { name: "Green Republic", tech: "Magento / Marketplace", year: "2010" },
];

const freelance = [
  { name: "Luzaka", tech: "Magento", year: "2017" },
  { name: "Luzaka", tech: "Magento 2", year: "2021" },
  { name: "Harmony Paris", tech: "Magento", year: "2014" },
  { name: "Christofle", tech: "Magento", year: "2014" },
  { name: "Skinizi", tech: "Magento", year: "2007" },
  { name: "Poladdict", tech: "Magento", year: "2012" },
  { name: "Willemy Charpente", tech: "WordPress", year: "2012" },
  { name: "Pierre Sancinéna", tech: "WordPress", year: "2009" },
  { name: "Inédit Joaillier", tech: "Sur-mesure", year: "2008" },
  { name: "La conspiration", tech: "Sur-mesure", year: "2008" },
  { name: "Ville de Gravigny", tech: "Sur-mesure", year: "2004" },
];

// Mapping techno -> styles CSS
const techColors = {
  Shopify: "background-color: #5E8E3E; color: white;",
  Mirakl: "background-color: #10243A; color: white;",
  Magento: "background-color: #ff7200; color: white;",
  Magento2: "background-color: #EB1000; color: white;",
  Symfony: "background-color: black; color: white;",
  WordPress: "background-color: #3858E9; color: white;",
  "Sur-mesure": "background-color: gray; color: white;",
  Marketplace: "background-color: purple; color: white;",
  Cegid: "background-color: #0046FE; color: white;",
};

function getTechColor(tech) {
  if (tech.toLowerCase() == "magento") return techColors["Magento"];
  if (tech.toLowerCase() == "magento 2") return techColors["Magento2"];
  return techColors[tech] || "background-color: #374151; color: white;";
}

// Fonction utilitaire pour extraire les années des projets, y compris les plages "2011 → 2013"
function extractYears(yearStr) {
  if (!yearStr) return [];
  if (yearStr.includes("→")) {
    const [start, end] = yearStr.split("→").map((y) => y.trim());
    if (start.toLowerCase().startsWith("depuis")) return [];
    const startYear = parseInt(start, 10);
    const endYear = parseInt(end, 10);
    if (isNaN(startYear) || isNaN(endYear)) return [];
    const years = [];
    for (let y = startYear; y <= endYear; y++) years.push(y.toString());
    return years;
  }
  if (yearStr.toLowerCase().startsWith("depuis")) {
    // Prends l'année de départ uniquement
    const y = yearStr.match(/\d{4}/);
    return y ? [y[0]] : [];
  }
  return [yearStr];
}

// Regroupement par année pour agences et freelance
const agencesByYear = {};
for (const projet of agences) {
  const years = extractYears(projet.year);
  years.forEach((y) => {
    if (!agencesByYear[y]) agencesByYear[y] = [];
    agencesByYear[y].push(projet);
  });
}

const freelanceByYear = {};
for (const projet of freelance) {
  const years = extractYears(projet.year);
  years.forEach((y) => {
    if (!freelanceByYear[y]) freelanceByYear[y] = [];
    freelanceByYear[y].push(projet);
  });
}

// Années à afficher (toutes années où il y a au moins un projet)
const allYearsSet = new Set([
  ...Object.keys(agencesByYear),
  ...Object.keys(freelanceByYear),
]);
const allYears = Array.from(allYearsSet)
  .map((y) => parseInt(y, 10))
  .filter((y) => !isNaN(y))
  .sort((a, b) => b - a);
---

<PageLayout meta={meta}>
  <section class="max-w-3xl mx-auto px-4 text-center mb-12 mt-8">
    <p class="text-lg bg-accent/20 p-6 mb-12 mx-autor rounded-lg">
      Les sites listés dans la section <strong>Agence</strong> sont des projets réalisés
      en équipe au sein de l'agence
      <a
        href="https://www.colorz.fr"
        target="_blank"
        rel="nofollow"
        class="theme-accent underline hover:no-underline">Colorz</a
      >
      entre 2010 et {year}.
    </p>
  </section>
  <section class="max-w-6xl mx-auto px-4 py-8 space-y-12">
    {
      allYears.map((annee) => {
        const agenceProjects = agencesByYear[annee] || [];
        const freelanceProjects = freelanceByYear[annee] || [];

        // N'affiche pas l'année si aucun projet
        if (agenceProjects.length === 0 && freelanceProjects.length === 0) {
          return null;
        }

        return (
          <section key={annee}>
            <h2 class="text-3xl text-zinc-300/40 font-mono font-bold mb-6 border-b border-zinc-300/40 pb-2">
              {annee}
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Bloc Agence uniquement si projets */}
              {agenceProjects.length > 0 && (
                <div>
                  <h3 class="text-xl font-semibold mb-4 text-accent">Agence</h3>
                  <ul class="space-y-3">
                    {agenceProjects.map(({ name, tech, year }) => {
                      const techBadges = tech
                        .split(/[\/,]/)
                        .map((t) => t.trim())
                        .filter(Boolean);
                      return (
                        <li
                          key={name}
                          class="flex flex-wrap items-center gap-4"
                        >
                          <span class="font-semibold">{name}</span>
                          <div class="flex flex-wrap gap-1">
                            {techBadges.map((t) => (
                              <span
                                key={t}
                                class="px-2 py-0.5 text-[0.6em] font-mono uppercase rounded"
                                style={`${getTechColor(t)}`}
                              >
                                {t}
                              </span>
                            ))}
                          </div>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              )}

              {/* Bloc Freelance uniquement si projets */}
              {freelanceProjects.length > 0 && (
                <div>
                  <h3 class="text-xl font-semibold mb-4 text-accent">
                    Freelance
                  </h3>
                  <ul class="space-y-3">
                    {freelanceProjects.map(({ name, tech, year }) => {
                      const techBadges = tech
                        .split(/[\/,]/)
                        .map((t) => t.trim())
                        .filter(Boolean);
                      return (
                        <li
                          key={name}
                          class="flex flex-wrap items-center gap-4"
                        >
                          <span class="font-semibold">{name}</span>
                          <div class="flex flex-wrap gap-1">
                            {techBadges.map((t) => (
                              <span
                                key={t}
                                class="px-2 py-0.5 text-[0.6em] font-mono uppercase rounded"
                                style={`${getTechColor(t)}`}
                              >
                                {t}
                              </span>
                            ))}
                          </div>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              )}
            </div>
          </section>
        );
      })
    }
  </section>
</PageLayout>
